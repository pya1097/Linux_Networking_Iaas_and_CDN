#c = customer
#v = vpc
#s = subnet
#b = bridge
#n = network
#ve = veth
#vm = virtual machine
---
- name: Provision a new subnet in a VPC
  hosts: localhost
  gather_facts: no
  vars:
    vpc_id: c1v1
    br_id: bc1v1s1
    veth_brns_br_inf: ve_bc1v1s1_b
    veth_brns_ns_inf: ve_bc1v1s1_v
    network_id: nc1v1s1
    veth_ns_ep_ip: 10.10.10.1/30 #{{ subnet_prefix }}.1/30
    prefix_ip: 10.10.10.0/30
    vm_id: vm1c1v1s1
    interface_name: enp1s0
    interface_address: 10.10.10.2/30
    template_dir: "/home/vmadm/project/automation/jinja_templates"
    script_files_dir: "/home/vmadm/project/subnet_files"
    memory: 1024
    vcpu: 1

  tasks:   
  
  #-----------------------------------BRIDGE CREATION----------------------------------------------
    - name: Create the directory
      ansible.builtin.file:
        path: "{{ script_files_dir }}/{{ vm_id }}"
        state: directory

    - name: Create a Linux Bride
      become: yes
      ansible.builtin.command: "sudo brctl addbr {{ br_id }}"

    - name: Ensure Bridge is up
      become: yes
      ansible.builtin.command: "sudo ip link set dev {{ br_id }} up"
    
  #-----------------------------------NETWORK CREATION----------------------------------------------
    - name: Copy network XML files to libvirt directory
      template:
        src: "{{ template_dir }}/network_definition.j2"
        dest: "{{ script_files_dir }}/{{ vm_id }}/{{ network_id }}.xml"

    - name: Define network using virsh
      command: virsh net-define "{{ script_files_dir }}/{{ vm_id }}/{{ network_id }}.xml"
      become: yes

    - name: Start the defined network
      command: "virsh net-start {{ network_id }}"
      become: yes

   #----------------------------------- NAMESPACE Connection ---------------------------------------------------- 
    - name: Creat veth pairs between bridge and NS
      become: yes
      ansible.builtin.command: "sudo ip link add {{ veth_brns_br_inf }} type veth peer name {{ veth_brns_ns_inf }}"
  
    - name: Attach NS to the ns ends of the veth pairs
      ansible.builtin.command: "sudo ip link set {{ veth_brns_ns_inf }} netns {{ vpc_id }}"
    
    - name: Ensure that NS interface is UP
      ansible.builtin.command: "sudo ip netns exec {{ vpc_id }} ip link set {{ veth_brns_ns_inf }} up"

    - name: Attach bridge endpoint to the br end
      ansible.builtin.command: "sudo ip link set {{ veth_brns_br_inf }} master {{ br_id }}"
    
    - name: Ensure that bridge interface is UP
      ansible.builtin.command: "sudo ip link set {{ veth_brns_br_inf }} up"

    - name: Assign IP address to veth vpc endpoint interface
      ansible.builtin.command: "sudo ip netns exec {{ vpc_id }} ip addr add {{ veth_ns_ep_ip }} dev {{ veth_brns_ns_inf }}"

    - name: Add NS IP rule for SNAT
      ansible.builtin.command: "sudo ip netns exec {{ vpc_id }} iptables -t nat -I POSTROUTING 1 -s {{ prefix_ip }} -o {{ vpc_id }}_ns ! -d {{ prefix_ip }} -j MASQUERADE"
