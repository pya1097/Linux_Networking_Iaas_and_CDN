---
- name: Provision a new subnet in a VPC
  hosts: localhost
  gather_facts: no
  vars:
    customer_name: c1
    vpc_name: c1_vpc1
    bridge_name: c1_vpc1_br1
    network_name: c1_vpc1_nw1
    veth_ns_ep_ip: 10.10.10.1/30
    subnet_ip: 10.10.10.1
    prefix_ip: 10.10.10.0/30
    vm_name: c1_vpc1_br1_vm1
    interface_name: enp1s0
    interface_address: 10.10.10.2/30
    template_dir: "/home/vmadm/project/automation/jinja_templates"
    script_files_dir: "/home/vmadm/project/subnet_files"
    memory: 1024
    vcpu: 1

  tasks:   
  
  #-----------------------------------BRIDGE CREATION----------------------------------------------
    - name: Create the directory
      ansible.builtin.file:
        path: "{{ script_files_dir }}/{{ vm_name }}"
        state: directory

    - name: Create a Linux Bride
      become: yes
      ansible.builtin.command: "sudo brctl addbr {{ bridge_name }}"

    - name: Ensure Bridge is up
      become: yes
      ansible.builtin.command: "sudo ip link set dev {{ bridge_name }} up"
    
  #-----------------------------------NETWORK CREATION----------------------------------------------
    - name: Copy network XML files to libvirt directory
      template:
        src: "{{ template_dir }}/network_definition.j2"
        dest: "{{ script_files_dir }}/{{ vm_name }}/{{ network_name }}.xml"

    - name: Define network using virsh
      command: virsh net-define "{{ script_files_dir }}/{{ vm_name }}/{{ network_name }}.xml"
      become: yes

    - name: Start the defined network
      command: "virsh net-start {{ network_name }}"
      become: yes

  #-----------------------------------VM CREATION-----------------------------------------------------

    # - name: Create directory for VM
    #   become: yes
    #   file:
    #     path: "/var/lib/libvirt/images/{{ vm_name }}"
    #     state: directory
    #     mode: '0755'

    # - name: Create QCOW2 image for VM
    #   become: yes
    #   command: qemu-img create -f qcow2 -F qcow2 -o backing_file=/var/lib/libvirt/images/jammy-server-cloudimg-amd64.img "/var/lib/libvirt/images/{{ vm_name }}/{{ vm_name }}.qcow2"

    # - name: Resize image
    #   become: yes
    #   command: qemu-img resize "/var/lib/libvirt/images/{{ vm_name }}/{{ vm_name }}.qcow2" 12G

    # - name: Create meta data files
    #   ansible.builtin.template:
    #     src: "{{ template_dir }}/meta_data.j2"
    #     dest: "/var/lib/libvirt/images/{{ vm_name }}/meta-data"
    #   become: yes

    # - name: Create user data file
    #   template:
    #     src: "{{ template_dir }}/user_data.j2"
    #     dest: "/var/lib/libvirt/images/{{ vm_name }}/user-data"
    #   become: yes    

    # - name: Run genisoimage command
    #   command: genisoimage -output "/var/lib/libvirt/images/{{ vm_name }}/{{ vm_name }}-cidata.iso" -volid cidata -joliet -rock meta-data user-data
    #   args:
    #     chdir: "/var/lib/libvirt/images/{{ vm_name }}"
    #   become: yes


    # - name: Generate XML files for VM definitions
    #   template:
    #     src: "{{ template_dir }}/vm_definition.j2"
    #     dest: "{{ script_files_dir }}/{{ vm_name }}/{{ vm_name }}.xml"


    # - name: create and start a VM
    #   command: virsh create  "{{ script_files_dir }}/{{ vm_name }}/{{ vm_name }}.xml"
    
   #----------------------------------- NAMESPACE Connection ---------------------------------------------------- 
    - name: Creat veth pairs between bridge and NS
      become: yes
      ansible.builtin.command: "sudo ip link add {{ bridge_name }}_inf type veth peer name {{ bridge_name }}_nsi"
  
    - name: Attach NS to the ns ends of the veth pairs
      ansible.builtin.command: "sudo ip link set {{ bridge_name }}_nsi netns {{ vpc_name }}"
    
    - name: Ensure that NS interface is UP
      ansible.builtin.command: "sudo ip netns exec {{ vpc_name }} ip link set {{ bridge_name }}_nsi up"

    - name: Attach bridge endpoint to the br end
      ansible.builtin.command: "sudo ip link set {{ bridge_name }}_inf master {{ bridge_name }}"
    
    - name: Ensure that bridge interface is UP
      ansible.builtin.command: "sudo ip link set {{ bridge_name }}_inf up"

    - name: Assign IP address to each veth endpoint interface- namespace
      ansible.builtin.command: "sudo ip netns exec {{ vpc_name }} ip addr add {{ veth_ns_ep_ip }} dev {{ bridge_name }}_nsi"

    - name: Add NS IP rule for SNAT
      ansible.builtin.command: "sudo ip netns exec {{ vpc_name }} iptables -t nat -I POSTROUTING 1 -s {{ prefix_ip }} -o {{ vpc_name }}_ns ! -d {{ prefix_ip }} -j MASQUERADE"

    